<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>SpringJOOQPoc</groupId>
  <artifactId>SpringJOOQPoc</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  
  <properties>
	 <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	 <java-version>1.8</java-version>
	 <cglib-version>3.1</cglib-version>
	 <io.spring.platform-version>2.0.1.RELEASE</io.spring.platform-version>
 	 <hikari.cp-version>2.3.12</hikari.cp-version>
 	 <jooq-version>3.8.4</jooq-version>
 	 <jooq-modelmapper-version>0.7.2</jooq-modelmapper-version>
 	 		<!-- BUILD PROPERTIES DEFINITION -->
	 <build.profile.id>dev</build.profile.id>
	 <skip.db.creation>true</skip.db.creation>
	 <jooq.generator.db.dialect>org.jooq.util.postgres.PostgresDatabase</jooq.generator.db.dialect>
	 <!-- 		available dialects -->
<!--            org.jooq.util.ase.ASEDatabase (to be used with Sybase ASE) -->
<!--            org.jooq.util.cubrid.CUBRIDDatabase -->
<!--            org.jooq.util.db2.DB2Database -->
<!--            org.jooq.util.derby.DerbyDatabase -->
<!--            org.jooq.util.h2.H2Database -->
<!--            org.jooq.util.hsqldb.HSQLDBDatabase -->
<!--            org.jooq.util.ingres.IngresDatabase -->
<!--            org.jooq.util.mysql.MySQLDatabase -->
<!--            org.jooq.util.oracle.OracleDatabase -->
<!--            org.jooq.util.postgres.PostgresDatabase -->
<!--            org.jooq.util.sqlite.SQLiteDatabase -->
<!--            org.jooq.util.sqlserver.SQLServerDatabase -->
<!--            org.jooq.util.sybase.SybaseDatabase (to be used with Sybase SQL Anywhere) -->
  </properties>
  	
  <dependencyManagement>
      <dependencies>
          <dependency>
	          <groupId>io.spring.platform</groupId>
	          <artifactId>platform-bom</artifactId>
	          <version>${io.spring.platform-version}</version>
	          <type>pom</type>
	          <scope>import</scope>
          </dependency>
       </dependencies>
  </dependencyManagement>
  
  <dependencies>
  		<!-- unit testing -->
       	<dependency>
	      <groupId>junit</groupId>
	      <artifactId>junit</artifactId>
	      <scope>test</scope>
	    </dependency>
	    
	    <!-- Dao Support -->
	    <dependency>
	        <groupId>org.springframework</groupId>
	        <artifactId>spring-jdbc</artifactId>
	    </dependency>
        <!-- Spring -->
	    
        <!-- Spring -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>
        <!-- Spring -->
        
		<!--for testing -->        
        <dependency>
		  <groupId>org.springframework</groupId>
		  <artifactId>spring-test</artifactId>
    	</dependency>  
    	
		<!-- postgres sql jar -->
	    <dependency>
	      <groupId>org.postgresql</groupId>
	      <artifactId>postgresql</artifactId>
	      <scope>compile</scope>
	    </dependency>
	    
		<!-- for modelmapper and spring dependencies -->
	    <dependency>
		    <groupId>cglib</groupId>
		    <artifactId>cglib</artifactId>
		    <version>${cglib-version}</version>
		</dependency>
		
	    <!-- Data Source Dependencies -->
		<!-- Persistence connection pooling-->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP-java6</artifactId>
			<version>${hikari.cp-version}</version>
		</dependency>
		
		<!-- jooq orm -->
		<dependency>
		    <groupId>org.jooq</groupId>
		    <artifactId>jooq</artifactId>
		    <version>${jooq-version}</version>
		</dependency>
		<dependency>
	  		<groupId>org.modelmapper.extensions</groupId>
	  		<artifactId>modelmapper-jooq</artifactId>
	  		<version>${jooq-modelmapper-version}</version>
		</dependency>
		
		
		<!-- LOGGING -->
		<!-- Log4J -->
		
		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
		</dependency>		
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
		</dependency>
		
		<!-- servlet -->
	   <dependency>
          <groupId>javax.servlet</groupId>
          <artifactId>javax.servlet-api</artifactId>
          <scope>provided</scope>
       </dependency>
  </dependencies>
  
  <!-- Profile configuration -->
<profiles>
    <!-- The configuration of the development profile -->
    <profile>
        <id>dev</id>
        <!-- The development profile is active by default -->
        <activation>
            <activeByDefault>true</activeByDefault>
        </activation>
        <properties>
            <!--
                Specifies the build.profile.id property that must be equal than the name of
                the directory that contains the profile specific configuration file.
                Because the name of the directory that contains the configuration file of the
                development profile is dev, we must set the value of the build.profile.id 
                property to dev.
            -->
            <build.profile.id>dev</build.profile.id>
        </properties>
    </profile>
    <!-- The configuration of the production profile -->
    <profile>
        <id>prod</id>
        <properties>
            <!--
                Specifies the build.profile.id property that must be equal than the name of
                the directory that contains the profile specific configuration file.
                Because the name of the directory that contains the configuration file of the
                production profile is prod, we must set the value of the build.profile.id 
                property to prod.
            -->
            <build.profile.id>prod</build.profile.id>
        </properties>
    </profile>
    <!-- The configuration of the testing profile -->
    <profile>
        <id>test</id>
        <properties>
            <!--
                Specifies the build.profile.id property that must be equal than the name of
                the directory that contains the profile specific configuration file.
                Because the name of the directory that contains the configuration file of the
                testing profile is test, we must set the value of the build.profile.id 
                property to test.
            -->
            <build.profile.id>test</build.profile.id>
        </properties>
    </profile>
</profiles>
 
 
 
<!--  for building -->
  
  <build>
	<filters>
	    <!--
	        Ensures that the config.properties file is always loaded from the
	        configuration directory of the active Maven profile.â€¨
	    -->
	    <filter>profiles/${build.profile.id}/config.properties</filter>
	</filters>
	
	
	
	<resources>
	    <!--
	        Placeholders that are found from the files located in the configured resource
	        directories are replaced with the property values found from the profile
	        specific configuration file.
	    -->
	    <resource>
	        <filtering>true</filtering>
	        <directory>src/main/resources</directory>
	    </resource>
	</resources>
  
    <testSourceDirectory>src/main/test</testSourceDirectory>
		<plugins>
		
<!-- 	1.	Reading the Properties From the Profile Specific Properties File -->
			<plugin>
				  <groupId>org.codehaus.mojo</groupId>
				  <artifactId>properties-maven-plugin</artifactId>
				  <version>1.0-alpha-2</version>
				  <executions>
				        <execution>
				            <phase>initialize</phase>
				            <goals>
				                <goal>read-project-properties</goal>
				            </goals>
				            <configuration>
				                <files>
				                    <file>profiles/${build.profile.id}/config.properties</file>
				                </files>
				            </configuration>
				        </execution>
				    </executions>
			</plugin>
			
<!-- 	2.	sql maven plug in -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>sql-maven-plugin</artifactId>
				<version>1.5</version>

				<configuration>
					<skip>${skip.db.creation}</skip>
				</configuration>

				<executions>
					<execution>
						<id>create-database-postgres</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>execute</goal>
						</goals>
						<configuration>
							<driver>${db.driver}</driver>
							<url>${db.url}</url>
							<username>${db.username}</username>
							<password>${db.password}</password>

							<autocommit>true</autocommit>
						</configuration>
					</execution>
				</executions>

				<dependencies>
					<dependency>
				      <groupId>org.postgresql</groupId>
				      <artifactId>postgresql</artifactId>
				      <version>9.4-1206-jdbc41</version>
				    </dependency>
				</dependencies>
			</plugin>

	<!-- 3. code generation -->
<plugin>
	<groupId>org.jooq</groupId>
	<artifactId>jooq-codegen-maven</artifactId>
	<version>${jooq-version}</version>
  
    <executions>
        <!-- Generate the required class from the database -->
        <execution>
            <id>generate-postgres</id>
            <phase>generate-sources</phase>
            <goals>
                <goal>generate</goal>
            </goals>
        </execution>
    </executions>
  
    <dependencies>
        <!--
            Because we use the H2 database, we have to add it as the dependency
            of this plugin.
        -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.4-1206-jdbc41</version>
		</dependency>
    </dependencies>
  
    <configuration>
        <!-- Configure the database connection -->
        <jdbc>
            <driver>${db.driver}</driver>
            <url>${db.url}</url>
            <user>${db.username}</user>
            <password>${db.password}</password>
        </jdbc>
  
        <generator>
            <database>
                <!-- Configure the used database dialect -->
                <name>${jooq.generator.db.dialect}</name>
                <!-- Include all tables found from the PUBLIC schema -->
                <includes>tbl_image|tbl_imagedetails|tbl_imageinfo</includes>
                <excludes></excludes>
                <inputSchema>public</inputSchema>
            </database>
            <!-- Generate classes for tables and records -->
            <generate>
                <records>true</records>
                <pojos>true</pojos>
            </generate>
            <!-- Configure the target package and directory -->
            <target>
                <packageName>com.poc.db</packageName>
                <directory>target/generated-sources/jooq</directory>
            </target>
        </generator>
    </configuration>
</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			
			<plugin>
                 <groupId>org.apache.tomcat.maven</groupId>
                 <artifactId>tomcat7-maven-plugin</artifactId>
                 <version>2.2</version>
                     <configuration>
                           <path>/SpringJOOQ</path>
                           <port>81</port>
                 </configuration>
            </plugin>
              
           <plugin>
               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-compiler-plugin</artifactId>
               <version>2.3.2</version>
               <configuration>
                   <source>${java-version}</source>
                   <target>${java-version}</target>
               </configuration>
         </plugin>
         
         <plugin>            
		  <groupId>org.apache.maven.plugins</groupId>
		  <artifactId>maven-war-plugin</artifactId>
		  <configuration>
		    <webXml>WebContent\WEB-INF\web.xml</webXml>        
		  </configuration>
		</plugin>
         
		</plugins>
  </build>
</project>